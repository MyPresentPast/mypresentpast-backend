{
	"info": {
		"_postman_id": "cccc3333-4444-5555-6666-777788889999",
		"name": "üèõÔ∏è MyPresentPast - Solicitudes de Instituci√≥n (PR2 REFACTORIZADO)",
		"description": "üéØ **SISTEMA DE SOLICITUDES DE INSTITUCI√ìN - PR2 (REFACTORIZADO)**\n\nüî• **FLUJO AUTOM√ÅTICO SIMPLIFICADO:**\n1. ‚úÖ **PASO 1:** Ejecuta 'Login Usuario Normal' ‚Üí Obt√©n token de usuario NORMAL\n2. ‚úÖ **PASO 2:** Ejecuta 'Create Institution Request' ‚Üí Sube documento Y crea solicitud en UNA operaci√≥n\n3. ‚úÖ **PASO 3:** Ejecuta 'Get My Requests' ‚Üí Ve tus solicitudes\n4. ‚úÖ **PASO 4:** Ejecuta 'Cancel Request' ‚Üí Cancela solicitud si es PENDING\n\nüéâ **FUNCIONALIDADES REFACTORIZADAS:**\n‚Ä¢ üèõÔ∏è **Solicitudes de instituci√≥n** para usuarios NORMAL\n‚Ä¢ üìÑ **Upload integrado** (PDF/JPG/PNG, max 5MB) - IGUAL QUE POSTS\n‚Ä¢ üìã **Gesti√≥n de solicitudes** (crear, ver, cancelar)\n‚Ä¢ üîí **Validaciones de negocio** (1 solicitud activa por usuario)\n‚Ä¢ ‚òÅÔ∏è **Integraci√≥n Cloudinary** autom√°tica en creaci√≥n\n‚Ä¢ üîÑ **Operaci√≥n at√≥mica** - documento + solicitud en un solo endpoint\n\nüõ†Ô∏è **ENDPOINTS INCLUIDOS:**\n‚Ä¢ üîê Login para obtener token de usuario NORMAL\n‚Ä¢ üèõÔ∏è POST /institution-requests - Crear solicitud CON documento (multipart)\n‚Ä¢ üìã GET /institution-requests/my - Ver mis solicitudes\n‚Ä¢ ‚ùå DELETE /institution-requests/{id} - Cancelar solicitud\n‚Ä¢ ‚úÖ GET /institution-requests/can-create - Verificar si puede crear\n\n‚ö° **VARIABLES AUTOM√ÅTICAS:**\n‚Ä¢ `{{base_url}}` = http://localhost:8081\n‚Ä¢ `{{normal_token}}` = Token de usuario normal\n‚Ä¢ `{{request_id}}` = ID de solicitud creada\n\nüìÖ **Refactorizado:** 13 de Septiembre 2025 - Consistencia con patr√≥n de Posts\n\nüÜï **MEJORAS DEL REFACTOR:**\n‚Ä¢ ‚úÖ Consistencia con creaci√≥n de posts (multipart en un endpoint)\n‚Ä¢ ‚úÖ Menos pasos para el usuario (UX mejorada)\n‚Ä¢ ‚úÖ Operaci√≥n at√≥mica (todo o nada)\n‚Ä¢ ‚úÖ Manejo de errores simplificado\n‚Ä¢ ‚úÖ Validaciones integradas en el servicio",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
		"_exporter_id": "26570332"
	},
	"item": [
		{
			"name": "üîê Authentication",
			"item": [
				{
					"name": "üë§ Login Usuario Normal",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// üî• Script autom√°tico para guardar token de usuario NORMAL",
									"if (pm.response.code === 200) {",
									"    const responseJson = pm.response.json();",
									"    pm.environment.set('normal_token', responseJson.token);",
									"    console.log('‚úÖ Login exitoso como usuario NORMAL');",
									"    console.log('üéØ Token guardado autom√°ticamente');",
									"    console.log('üí° Ahora puedes crear solicitudes de instituci√≥n');",
									"} else {",
									"    console.log('‚ùå Error en login:', pm.response.text());",
									"    console.log('üí° Verifica que el usuario existe y la contrase√±a es correcta');",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"normal@test.com\",\n  \"password\": \"TestPassword123\"\n}"
						},
						"url": "{{base_url}}/auth/login"
					}
				}
			]
		},
		{
			"name": "üèõÔ∏è Institution Requests",
			"item": [
				{
					"name": "‚úÖ Check Can Create Request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// üî• Test para verificar si puede crear solicitud",
									"if (pm.response.code === 200) {",
									"    const canCreate = pm.response.json();",
									"    console.log('‚úÖ Verificaci√≥n exitosa');",
									"    if (canCreate) {",
									"        console.log('üéØ PUEDE crear nueva solicitud');",
									"        console.log('üí° Usuario es NORMAL y no tiene solicitud activa');",
									"    } else {",
									"        console.log('‚ö†Ô∏è NO PUEDE crear nueva solicitud');",
									"        console.log('üí° Posibles razones:');",
									"        console.log('   - Usuario no es NORMAL');",
									"        console.log('   - Ya tiene solicitud activa (PENDING/IN_REVIEW/APPROVED)');",
									"    }",
									"} else {",
									"    console.log('‚ùå Error al verificar:', pm.response.text());",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{normal_token}}"
							}
						],
						"url": "{{base_url}}/institution-requests/can-create"
					}
				},
				{
					"name": "üèõÔ∏è Create Institution Request (WITH Document)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// üî• Script autom√°tico para crear solicitud de instituci√≥n CON documento",
									"if (pm.response.code === 201) {",
									"    const responseJson = pm.response.json();",
									"    console.log('‚úÖ Solicitud de instituci√≥n creada exitosamente');",
									"    console.log('üìù Mensaje:', responseJson.message);",
									"    console.log('üéØ Estado inicial: PENDING');",
									"    console.log('üìÑ Documento subido autom√°ticamente');",
									"    console.log('üí° Ahora consulta tus solicitudes para ver el ID');",
									"} else if (pm.response.code === 400) {",
									"    const errorMsg = pm.response.json().message;",
									"    console.log('‚ö†Ô∏è Error de validaci√≥n:', errorMsg);",
									"    if (errorMsg.includes('solicitud activa')) {",
									"        console.log('üí° Tip: Ya tienes una solicitud activa. Canc√©lala primero si es PENDING');",
									"    } else if (errorMsg.includes('documento')) {",
									"        console.log('üí° Tip: Verifica que el documento sea PDF/JPG/PNG y menor a 5MB');",
									"    } else if (errorMsg.includes('mayor a 5MB')) {",
									"        console.log('üí° Tip: El documento es muy grande, usa uno menor a 5MB');",
									"    } else if (errorMsg.includes('no permitido')) {",
									"        console.log('üí° Tip: Solo se permiten archivos PDF, JPG y PNG');",
									"    }",
									"} else if (pm.response.code === 403) {",
									"    console.log('üö´ No autorizado - VERIFICA:');",
									"    console.log('   1. Que el token sea de un usuario NORMAL');",
									"    console.log('   2. Que hayas ejecutado el login correctamente');",
									"} else {",
									"    console.log('‚ùå Error inesperado:', pm.response.text());",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{normal_token}}"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "request",
									"value": "{\n  \"institution_name\": \"Universidad de Ejemplo\",\n  \"legal_address\": \"Av. Universitaria 123, Ciudad Ejemplo, Pa√≠s\",\n  \"official_phone\": \"+1234567890\",\n  \"type\": \"UNIVERSITY\",\n  \"official_registry_number\": \"REG-2024-001\",\n  \"official_website\": \"https://www.universidad-ejemplo.edu\"\n}",
									"type": "text",
									"contentType": "application/json"
								},
								{
									"key": "document",
									"type": "file",
									"src": [],
									"description": "Selecciona un archivo PDF, JPG o PNG (m√°x 5MB)"
								}
							]
						},
						"url": "{{base_url}}/institution-requests"
					}
				},
				{
					"name": "üìã Get My Requests",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// üî• Test para ver solicitudes del usuario",
									"if (pm.response.code === 200) {",
									"    const requests = pm.response.json();",
									"    console.log('‚úÖ Solicitudes obtenidas exitosamente');",
									"    console.log('üìä Total de solicitudes:', requests.length);",
									"    ",
									"    if (requests.length > 0) {",
									"        // Guardar ID de la primera solicitud para cancelar",
									"        pm.environment.set('request_id', requests[0].id);",
									"        ",
									"        requests.forEach((request, index) => {",
									"            console.log(`\\nüìã Solicitud ${index + 1}:`);",
									"            console.log('   ID:', request.id);",
									"            console.log('   Instituci√≥n:', request.institution_name);",
									"            console.log('   Tipo:', request.type);",
									"            console.log('   Estado:', request.status);",
									"            console.log('   Creada:', request.created_at);",
									"            console.log('   Documento:', request.document_url ? '‚úÖ Subido' : '‚ùå Sin documento');",
									"            if (request.reviewed_at) {",
									"                console.log('   Revisada:', request.reviewed_at);",
									"            }",
									"            if (request.rejection_reason) {",
									"                console.log('   Motivo rechazo:', request.rejection_reason);",
									"            }",
									"        });",
									"        ",
									"        console.log('\\nüéØ ID de primera solicitud guardado para cancelar');",
									"    } else {",
									"        console.log('üìù No tienes solicitudes creadas a√∫n');",
									"    }",
									"} else {",
									"    console.log('‚ùå Error al obtener solicitudes:', pm.response.text());",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{normal_token}}"
							}
						],
						"url": "{{base_url}}/institution-requests/my"
					}
				},
				{
					"name": "‚ùå Cancel Request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// üî• Test para cancelar solicitud",
									"if (pm.response.code === 200) {",
									"    const responseJson = pm.response.json();",
									"    console.log('‚úÖ Solicitud cancelada exitosamente');",
									"    console.log('üìù Mensaje:', responseJson.message);",
									"    console.log('üéØ Estado cambiado a: CANCELLED');",
									"    console.log('üí° Ahora puedes crear una nueva solicitud');",
									"} else if (pm.response.code === 400) {",
									"    const errorMsg = pm.response.json().message;",
									"    console.log('‚ö†Ô∏è Error de validaci√≥n:', errorMsg);",
									"    if (errorMsg.includes('pendientes')) {",
									"        console.log('üí° Tip: Solo se pueden cancelar solicitudes PENDING');",
									"        console.log('üí° Si est√° IN_REVIEW o APPROVED, no se puede cancelar');",
									"    }",
									"} else if (pm.response.code === 404) {",
									"    console.log('‚ùå Solicitud no encontrada');",
									"    console.log('üí° Tip: Verifica que el ID sea correcto y sea tuya');",
									"} else {",
									"    console.log('‚ùå Error inesperado:', pm.response.text());",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{normal_token}}"
							}
						],
						"url": "{{base_url}}/institution-requests/{{request_id}}"
					}
				}
			]
		},
		{
			"name": "üß™ Test Scenarios",
			"item": [
				{
					"name": "üö´ Try Create Request as Institution (Should Fail)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// üî• Test negativo - instituci√≥n no puede crear solicitud",
									"if (pm.response.code === 403) {",
									"    console.log('‚úÖ Test CORRECTO: Instituci√≥n no puede crear solicitud');",
									"    console.log('üîí Seguridad funcionando: Solo usuarios NORMAL pueden solicitar');",
									"} else if (pm.response.code === 400) {",
									"    const errorMsg = pm.response.json().message;",
									"    if (errorMsg.includes('usuarios normales')) {",
									"        console.log('‚úÖ Test CORRECTO: Validaci√≥n de rol funcionando');",
									"    } else {",
									"        console.log('‚ö†Ô∏è Error diferente al esperado:', errorMsg);",
									"    }",
									"} else {",
									"    console.log('‚ùå Test FALLIDO: Deber√≠a fallar con 403 o 400');",
									"    console.log('üìù Respuesta:', pm.response.text());",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{institution_token}}"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "request",
									"value": "{\n  \"institution_name\": \"Test Institution\",\n  \"legal_address\": \"Test Address 123\",\n  \"official_phone\": \"+1234567890\",\n  \"type\": \"UNIVERSITY\"\n}",
									"type": "text",
									"contentType": "application/json"
								},
								{
									"key": "document",
									"type": "file",
									"src": []
								}
							]
						},
						"url": "{{base_url}}/institution-requests"
					}
				},
				{
					"name": "üìÑ Try Create Without Document (Should Fail)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// üî• Test negativo - crear sin documento",
									"if (pm.response.code === 400) {",
									"    const errorMsg = pm.response.json().message;",
									"    console.log('‚úÖ Test CORRECTO: Crear sin documento falla');",
									"    console.log('üîí Validaci√≥n funcionando:', errorMsg);",
									"    if (errorMsg.includes('documento es requerido')) {",
									"        console.log('üí° Validaci√≥n espec√≠fica: Documento requerido');",
									"    }",
									"} else {",
									"    console.log('‚ùå Test FALLIDO: Deber√≠a fallar con 400');",
									"    console.log('üìù Respuesta:', pm.response.text());",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{normal_token}}"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "request",
									"value": "{\n  \"institution_name\": \"Test Institution\",\n  \"legal_address\": \"Test Address 123\",\n  \"official_phone\": \"+1234567890\",\n  \"type\": \"UNIVERSITY\"\n}",
									"type": "text",
									"contentType": "application/json"
								}
							]
						},
						"url": "{{base_url}}/institution-requests"
					}
				}
			]
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:8081"
		},
		{
			"key": "normal_token",
			"value": ""
		},
		{
			"key": "institution_token",
			"value": ""
		},
		{
			"key": "request_id",
			"value": ""
		}
	]
}
